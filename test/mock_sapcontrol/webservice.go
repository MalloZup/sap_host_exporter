// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SUSE/sap_host_exporter/internal/sapcontrol (interfaces: WebService)

// Package mock_sapcontrol is a generated GoMock package.
package mock_sapcontrol

import (
	sapcontrol "github.com/SUSE/sap_host_exporter/internal/sapcontrol"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWebService is a mock of WebService interface
type MockWebService struct {
	ctrl     *gomock.Controller
	recorder *MockWebServiceMockRecorder
}

// MockWebServiceMockRecorder is the mock recorder for MockWebService
type MockWebServiceMockRecorder struct {
	mock *MockWebService
}

// NewMockWebService creates a new mock instance
func NewMockWebService(ctrl *gomock.Controller) *MockWebService {
	mock := &MockWebService{ctrl: ctrl}
	mock.recorder = &MockWebServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebService) EXPECT() *MockWebServiceMockRecorder {
	return m.recorder
}

// EnqGetStatistic mocks base method
func (m *MockWebService) EnqGetStatistic() (*sapcontrol.EnqGetStatisticResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqGetStatistic")
	ret0, _ := ret[0].(*sapcontrol.EnqGetStatisticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqGetStatistic indicates an expected call of EnqGetStatistic
func (mr *MockWebServiceMockRecorder) EnqGetStatistic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqGetStatistic", reflect.TypeOf((*MockWebService)(nil).EnqGetStatistic))
}

// GetProcessList mocks base method
func (m *MockWebService) GetProcessList() (*sapcontrol.GetProcessListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessList")
	ret0, _ := ret[0].(*sapcontrol.GetProcessListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessList indicates an expected call of GetProcessList
func (mr *MockWebServiceMockRecorder) GetProcessList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessList", reflect.TypeOf((*MockWebService)(nil).GetProcessList))
}

// GetQueueStatistic mocks base method
func (m *MockWebService) GetQueueStatistic() (*sapcontrol.GetQueueStatisticResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueStatistic")
	ret0, _ := ret[0].(*sapcontrol.GetQueueStatisticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueStatistic indicates an expected call of GetQueueStatistic
func (mr *MockWebServiceMockRecorder) GetQueueStatistic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueStatistic", reflect.TypeOf((*MockWebService)(nil).GetQueueStatistic))
}

// HACheckConfig mocks base method
func (m *MockWebService) HACheckConfig() (*sapcontrol.HACheckConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HACheckConfig")
	ret0, _ := ret[0].(*sapcontrol.HACheckConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HACheckConfig indicates an expected call of HACheckConfig
func (mr *MockWebServiceMockRecorder) HACheckConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HACheckConfig", reflect.TypeOf((*MockWebService)(nil).HACheckConfig))
}

// HACheckFailoverConfig mocks base method
func (m *MockWebService) HACheckFailoverConfig() (*sapcontrol.HACheckFailoverConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HACheckFailoverConfig")
	ret0, _ := ret[0].(*sapcontrol.HACheckFailoverConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HACheckFailoverConfig indicates an expected call of HACheckFailoverConfig
func (mr *MockWebServiceMockRecorder) HACheckFailoverConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HACheckFailoverConfig", reflect.TypeOf((*MockWebService)(nil).HACheckFailoverConfig))
}

// HAGetFailoverConfig mocks base method
func (m *MockWebService) HAGetFailoverConfig() (*sapcontrol.HAGetFailoverConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HAGetFailoverConfig")
	ret0, _ := ret[0].(*sapcontrol.HAGetFailoverConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HAGetFailoverConfig indicates an expected call of HAGetFailoverConfig
func (mr *MockWebServiceMockRecorder) HAGetFailoverConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HAGetFailoverConfig", reflect.TypeOf((*MockWebService)(nil).HAGetFailoverConfig))
}
